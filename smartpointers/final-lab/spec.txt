Memory Lab

This lab is broadly about memory management in c++; creating and working with
multiple, templated, interacting classes; and combining language features to
produce a general, extendible product. The final goal is to produce simple
simulator for a road network. In this network, cars have a single point of entry
and a separate single point of exit. Along the way, cars use the A* algorithm
to compute the best route from where they are to the end and we'll time the cars
on various heuristics to see which seems to be working the best.

Before we get more into the specifics of the simulator and its behavior, we want
to be absolutely sure that it doesn't leak memory. Even if this comes with some
runtime cost, we'll say that's ok since a simulation that leaks memory is going to
affect the performance of the entire machine running it. To ensure that no memory
leaks, we're going to say that the simulator isn't allowed to store any raw pointers.
To keep track of it's data, it must hold the pointers in a memory management
class that (surprise) you're going to write.

Part 1 Not-So-Smart Pointers

A. SmartPtr<T, BasePtr>

As chapter 7 of Modern C++ Design explains, making a class that perfectly wraps
the functionality of a raw pointer and perfectly frees that memory is not a
trivial task. We're going to write a class that performs a subset of the work
c++11's unique_ptr and shared_ptr do. Specifically, your SmartPtr will not
guarantee that an allocated object it holds will get deleted. If the user of
your SmartPtr class misuses it, it will leak memory just like a raw pointer
will. This may seem pointless but we specifically want this class to take care
of allocating and freeing memory for us. We don't want to have to remember to
call "delete" on everything that we've allocated with "new" because with something
as big and complicated as a network simulator, we are bound to make mistakes.

Your class, SmartPtr, mirrors raw pointers, but adds functionality for automatically
deleting the pointer when you're done with it. Before getting into implementation
specifics, this is how SmartPtr's behave generally:

	  // the user of a SmartPtr should never explicitly call
	  // new or delete - SmartPtr takes care of that for us
	string* allocString()       { return new string; }
	void freeString(string* s)  { delete s; }

	int* allocIntArray()        { return new int[10]; }
	void freeIntArray(int* i)   { delete [] i; }

	int main() {
		  // when initialized, SmartPtrs allocate the memory and
		  // remember how to delete it
		SmartPtr<string, BasePtr> sptr(&allocString, &freeString);

		  // we can use SmartPtrs like raw pointers
		*sptr = "tyrion";
		assert(sptr->size() == 6);
		assert((*sptr)[3] == 'i');

		SmartPtr<string, BaesPtr> sptr1(&allocString, &freeString);
		*sptr1 = "tyrion";
		assert(sptr1 != sptr);
		assert(*sptr1 == *sptr);

		  // you can also allocate arrays
		SmartPtr<int, BasePtr> intarrptr(&allocIntArray, &freeIntArray);

		intarrptr[0] = 10;
		intarrptr[1] = 20;
		assert((*intarrptr) + (*(intarrptr + 1)) == 30);

		int* intptr = intarrptr + 2;
		*intptr = 30;
		assert(intarrptr[0] + intarrptr[1] + intarrptr[2] == 60);

		cout << "Passed all tests!" << endl;
	}

All SmartPtrs provide the same functionality as raw pointers, meaning the above code
with your SmartPtr and BasePtr classes should compile and print "Passed all tests!"
when run. On top of that, it shouldn't leak memory.

You probably noticed that SmartPtr have two template arguments. The SmartPtr is a
templated class that stores a pointer to an object of some type, but it also stores an
implementation (well, a pointer to some implementation) that does all the real work.
There are a multitude of ways a SmartPtr can be implemented and function. From here,
we'll focus on cheaply imitating the two c++11 provides: unique pointer and shared
pointers. On the surface the difference is simple, only one unique pointer can point
to a particular object while any number of shared pointers can point to an object.

B. SmartPtr<T, UniquePtr>

As we've said, a UniquePtr is the only UniquePtr that points to the allocated object
it points to. If the user of your UniquePtr class also stores a raw pointer that
points to the same thing some UniquePtr points to, they are taking a huge risk. For
example, if they delete that object, your class should guarantee a double deletion.

On top of the functions BasePtr provides, UniquePtr should support the following public
interface. The class structure of Base/Unique/SharedPtr is up to you. If you need to
make minor changes (add virtual or override) to this interface to support that,
that's up to you. But these functions must be supported for an object
of type SmartPtr<T, UniquePtr>.

	  // Default constructor points to some garbage value
	  // like raw pointers, this allows us to keep containers
	  // of UniquePtrs. If you default construct a UniquePtr and
	  // want it to point to something later, you must use the
	  // reset function. The danger is if you re-assign a default
	  // constructed UniquePtr, there is no delete function to call
	  // on that memory - user beware!
	UniquePtr();

	  // Construct with some allocated memory (a pointer to it)
	  // and a mechanism for deleting that memory
	UniquePtr(T* obj, void (*deleteFunc) (T*));

	  // Construct with just a deletion function
	UniquePtr(void (*) (T*));

	  // Copy contructor: this steals the object and delete
	  // function from other (not const)
	UniquePtr(UniquePtr<T>& other);

	  // Move constructor for temporary values that are passed in to
	  // a constructor, transfers ownership over to me (this), so mover
	  // can no longer point to the object when this function returns
	UniquePtr(UniquePtr<T>&& mover);

	  // Clean up the memory by calling the delete function you
	  // were given
	~UniquePtr();

	  // Assignment operator (have it point to something new): clears
	  // what this pointed to before and sets it to point to rhs's
	  // object of the same type. The other UniquePtr then must NOT point
	  // to that same object.
	UniquePtr<T>& operator=(UniquePtr<T>& rhs);

	  // should also be able to reassign it to new memory
	void reset(T* obj, void (*deleteFunc) (T*));

	  // Only ever one pointer to that object.
	int getNumReferences() const;

The move constructor is called when an object is initialized using std::move
or as the return value of a function returning a SmartPtr. For more information,
read https://en.cppreference.com/w/cpp/language/move_constructor.

You can add any private functionality that you need.

C. SmartPtr<T, SharedPtr>

A SharedPtr can point to an object that is pointed to by any number of other
SharedPtrs. There are multiple ways to provide this functionality (see Modern
C++ Design chapter 7 for more details about the trade offs) but we are going
to implement a Reference Count. Each SharedPtr should know the number of other
SharedPtrs pointing to the same object. Again, the class and inheritance
structure is up to you, as long as the following public interface is specified:

	  // default constructor has it point to nothing and initializes
	  // the reference count
	SharedPtr();

	  // point to obj and remember how to delete it
	SharedPtr(T* obj, void (*deleteFunc) (T*));

	  // Copy Constructor - have this point to what
	  // other points to and updatees the reference count
	SharedPtr(SharedPtr& other);

	  // Move/Steal constructor. You're effectively moving the
	  // pointer from mover to this. So at the end, mover no longer
	  // points to the object and the reference count hasn't changed
	  // since you've removed one pointer and added another (x+1-1=x).
	SharedPtr(SharedPtr&& mover);

	  // Destructor: this no longer points to its object
	~SharedPtr();

	  // Assignment operator: this no longer points to its object, and
	  // now shares a pointer with rhs.
	SharedPtr& operator=(SharedPtr& rhs);
	
	  // this no longer points to its object and now points to a newly
	  // allocated object wih a new reference count
	void reset(T* obj, void (*deleteFunc) (T*));

	  // returns the number of references to the object this points
	  // to. If it's an invalid reference (has been moved to another),
	  // then return -1.
	int getNumReferences() const;

Once you've finished implementing SmartPtr, UniquePtr, and SharedPtr, you should
ensure it passes all of the tests in ptr-test.cpp.

Part 2 Simple Road Simulator

To simulate a network of roads and vehicles moving through it, we'll make the
reduction that the network is a two-dimensional grid of intersections. It takes
one "iteration" of the simulation for each car to move from one intersection to
another. Each intersection can hold an infinite number of cars.

The specification for your simulator is intentionally simple and vague. You
should use your now exceptional C++ skills to design the simulator. A few key
requirements:

	a. It must not store ANY raw pointers.
	b. You Simulation class must be constructed with the following integers:
	     - numRows/numCols: number rows/columns in the network
	       * (numRows*numCols) is the number of intersections
	     - startRow/startCol: row/column each car enters on
	     - endRow/endCol: row/column each car exits on
	     - carFreq: insert a new car every carFreq interations
	c. 

An interation of the simulation consists of the following:
 - potentially inserting a new car
 - giving each car the chance to move (in a direction the car computes)
 - removing the car from the simulation if it's reached the end
